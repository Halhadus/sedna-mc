buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'idea'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply from: 'minecraft.gradle'

def getGitRef() {
    try {
        final def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (final Throwable ignored) {
        return 'unknown'
    }
}

version = "${semver}+${getGitRef()}"
group = 'li.cil.sedna'

java.toolchain {
    languageVersion = JavaLanguageVersion.of(17)
    vendor = JvmVendorSpec.ADOPTOPENJDK
}

configurations {
    embed
    implementation.extendsFrom embed
}

repositories {
    mavenCentral()
    ["fnuecke/ceres", "fnuecke/sedna", "fnuecke/buildroot"].forEach(repo -> {
        maven {
            url = uri("https://maven.pkg.github.com/${repo}")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_KEY")
            }
        }
    })
}

def tryProject(final projectName, final libraryName) {
    findProject(projectName) ?: libraryName
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    embed(tryProject(':modules:ceres', 'li.cil.ceres:ceres:0.0.4')) { transitive = false }
    embed(tryProject(':modules:sedna', 'li.cil.sedna:sedna:2.0.6')) { transitive = false }
    embed(tryProject(':modules:sedna-buildroot', 'li.cil.sedna:sedna-buildroot:0.0.8')) { transitive = false }
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                sedna {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                sedna {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            args '--mod', 'sedna', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                sedna {
                    source sourceSets.main
                }
            }
        }
    }
}

jar {
    finalizedBy 'reobfJar'

    configurations.embed.each {
        from(project.zipTree(it)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }

    manifest {
        attributes([
            'Specification-Title'     : 'sedna',
            'Specification-Vendor'    : 'Sangar',
            'Specification-Version'   : '1',
            'Implementation-Title'    : project.name,
            'Implementation-Version'  : "${semver}",
            'Implementation-Vendor'   : 'Sangar',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = semver
            artifact jar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = System.getenv("GITHUB_MAVEN_URL") ?: ""
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

curseforge {
    apiKey = System.getenv('CURSEFORGE_API_KEY') ?: ""
    project {
        id = curse_project_id
        releaseType = System.getenv('CURSEFORGE_RELEASE_TYPE') ?: "alpha"
        changelogType = 'markdown'
        changelog = System.getenv("CHANGELOG") ?: "Changelog not available."
        addGameVersion 'Forge'
        addGameVersion minecraft_version
        addGameVersion 'Java 17'
    }
}

idea {
    module {
        for (final String exclude in ['out', 'logs', 'run', 'src/generated']) {
            excludeDirs += file(exclude)
        }
    }
}
