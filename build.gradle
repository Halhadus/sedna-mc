buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'idea'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'

def getGitRef() {
    try {
        final def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (final Throwable ignored) {
        return 'unknown'
    }
}

final String semver = "${version_major}.${version_minor}.${version_patch}"

String build_number = System.getenv('PROMOTED_NUMBER');
if (build_number == null)
    build_number = System.getenv('BUILD_NUMBER')
if (build_number == null)
    build_number = getGitRef()

version = "${semver}+${build_number}"
group = 'li.cil.sedna'
archivesBaseName = 'sedna'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

configurations {
    embed
    implementation.extendsFrom embed
}

repositories {
    mavenCentral()
    maven { url 'https://maven.cil.li/' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    embed('li.cil.ceres:ceres:0.0.3+') { transitive = false }
    embed('li.cil.sedna:sedna:1.0.1+') { transitive = false }
    embed('li.cil.sedna:sedna-buildroot:0.0.1+15') { transitive = false }
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                sedna {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                sedna {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            args '--mod', 'sedna', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                sedna {
                    source sourceSets.main
                }
            }
        }
    }
}

jar {
    finalizedBy 'reobfJar'

    configurations.embed.each {
        from(project.zipTree(it)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }

    manifest {
        attributes([
                'Specification-Title'     : 'sedna_mc',
                'Specification-Vendor'    : 'Sangar',
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : "${semver}",
                'Implementation-Vendor'   : 'Sangar',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url System.getenv('MAVEN_PATH')
        }
    }
}

idea {
    module {
        for (final String exclude in ['out', 'logs', 'run', 'src/generated']) {
            excludeDirs += file(exclude)
        }
    }
}
